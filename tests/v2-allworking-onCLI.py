from instagrapi import Client
import os
import random
import time

# Configura√ß√£o do cliente
client = Client()
SESSION_FILE = "session.json"

# Limites de intera√ß√µes
INTERACTIONS_PER_HOUR = 20
INTERACTIONS_PER_DAY = 300
hourly_interactions = 0
daily_interactions = 0

# Lista de coment√°rios
comments = [
    "ü§£", "üòÇ", "üî•", "üòé", "üòç", "üëç", "üëè", "‚ù§Ô∏è", "üíØ", "üòÖ",
    "Muito bom!", "Incr√≠vel!", "Que top!", "Amei isso!", "Haha, demais!",
    "Uhuu!", "Rsrs", "Hahaha!", "Espetacular!", "Que massa!",
    "Show!", "Top demais!", "Kkkk!", "Adorei!", "Divertido!",
    "Genial!", "√ìtimo post!", "Boa essa!", "Criativo!", "Melhor do dia!",
    "Rsrs, curti!", "Interessante!", "Legal!", "Uhuul!", "üòÇüòÇ",
    "Haha, incr√≠vel!", "Super criativo!", "Que conte√∫do!", "Post genial!", "T√¥ rindo muito!",
    "üòÜüòÜ", "üëèüëè", "Haha, show!", "Melhor hashtag!", "Arrasou!",
    "ü§£ü§£", "Mandou bem!", "Que ideia!", "Haha, curti muito!", "Rsrs, gostei!"
]

# Fun√ß√£o para fazer login e salvar sess√£o
def login(username, password):
    if os.path.exists(SESSION_FILE):
        print("[INFO] Restaurando sess√£o salva...")
        client.load_settings(SESSION_FILE)
        client.login(username, password)
    else:
        print("[INFO] Realizando login manual...")
        client.login(username, password)
        client.dump_settings(SESSION_FILE)
    print("[INFO] Login bem-sucedido!")

# Fun√ß√£o para aplicar delay aleat√≥rio e limitar intera√ß√µes
def enforce_limits():
    global hourly_interactions, daily_interactions
    if hourly_interactions >= INTERACTIONS_PER_HOUR:
        print("[WARNING] Limite de intera√ß√µes por hora alcan√ßado. Aguardando 1 hora...")
        time.sleep(3600)  # Aguarda 1 hora
        hourly_interactions = 0
    if daily_interactions >= INTERACTIONS_PER_DAY:
        print("[WARNING] Limite de intera√ß√µes di√°rias alcan√ßado. Finalizando...")
        exit()  # Finaliza o programa para evitar mais intera√ß√µes
    # Delay aleat√≥rio entre 20-60 segundos
    delay = random.randint(20, 60)
    print(f"[INFO] Aguardando {delay} segundos antes da pr√≥xima a√ß√£o...")
    time.sleep(delay)

# Fun√ß√£o para curtir, seguir e comentar usu√°rios de uma hashtag
def interact_with_hashtags(hashtags):
    global hourly_interactions, daily_interactions
    try:
        # Seleciona uma hashtag aleat√≥ria
        hashtag = random.choice(hashtags)
        print(f"[INFO] Acessando hashtag: #{hashtag}")
        
        # Obt√©m postagens da hashtag
        posts = client.hashtag_medias_recent(hashtag, amount=20)
        if not posts:
            print(f"[INFO] Nenhum post encontrado para a hashtag #{hashtag}")
            return

        # Seleciona um post aleat√≥rio
        post = random.choice(posts)
        user_id = post.user.pk
        username = post.user.username
        print(f"[INFO] Selecionado post de @{username} (ID: {user_id})")

        # Decide aleatoriamente se ir√° curtir o post (50% de chance)
        if random.choice([True, False]):
            enforce_limits()
            client.media_like(post.id)
            print(f"[SUCCESS] Curtiu o post de @{username}")
            hourly_interactions += 1
            daily_interactions += 1
        else:
            print(f"[INFO] Decidiu n√£o curtir o post de @{username} nesta intera√ß√£o.")

        # Decide aleatoriamente se ir√° seguir o usu√°rio (50% de chance)
        if random.choice([True, False]):
            enforce_limits()
            client.user_follow(user_id)
            print(f"[SUCCESS] Seguiu o usu√°rio @{username}")
            hourly_interactions += 1
            daily_interactions += 1
        else:
            print(f"[INFO] Decidiu n√£o seguir o usu√°rio @{username} nesta intera√ß√£o.")

        # Decide aleatoriamente se ir√° comentar (50% de chance)
        if random.randint(1, 100) <= 10: 
            enforce_limits()
            comment = random.choice(comments)
            client.media_comment(post.id, comment)
            print(f"[SUCCESS] Comentou no post de @{username}: '{comment}'")
            hourly_interactions += 1
            daily_interactions += 1
        else:
            print(f"[INFO] Decidiu n√£o comentar no post de @{username} nesta intera√ß√£o.")

        print(f"[INFO] Intera√ß√µes at√© agora: {hourly_interactions} (hora) / {daily_interactions} (dia)")

    except Exception as e:
        print(f"[ERROR] Erro ao interagir com a hashtag #{hashtag}: {str(e)}")

# Configura√ß√£o principal
if __name__ == "__main__":
    USERNAME = "dr.economicomics"
    PASSWORD = "PadraoSS2024!"

    # Lista de hashtags para interagir
    hashtags = [
        "humor", "memes", "engracado", "humorbrasil", "piadas",
        "rindoalto", "comedia", "zoeira", "memesbr", "memesengracados",
        "humornacional", "humornegro", "risadas", "memezando", "memedodia",
        "brasilmemes", "brincadeiras", "zoeirabr", "comediaengracada", "memesbrasileiros"
    ]

    # Realiza login e salva sess√£o
    login(USERNAME, PASSWORD)

    # Loop infinito para executar e esperar
    while True:
        interact_with_hashtags(hashtags)
        delay = random.randint(60, 120)
        print(f"[INFO] Ciclo completo. Aguardando {delay} segundos antes do pr√≥ximo ciclo...")

        time.sleep(delay)  # Aguarda 60-120 segundos antes de executar novamente
