import streamlit as st
from instagrapi import Client
import os
import random
import time
import json

# Configura√ß√£o do cliente
client = Client()
SESSION_FILE = "session.json"
STATS_FILE = "stats.json"

# Estat√≠sticas de intera√ß√µes
INTERACTIONS_PER_HOUR = 20
INTERACTIONS_PER_DAY = 300
hourly_interactions = 0
daily_interactions = 0

# Lista de coment√°rios
comments = [
    "ü§£", "üòÇ", "üî•", "üòé", "üòç", "üëç", "üëè", "‚ù§Ô∏è", "üíØ", "üòÖ",
    "Muito bom!", "Incr√≠vel!", "Que top!", "Amei isso!", "Haha, demais!",
    "Uhuu!", "Rsrs", "Hahaha!", "Espetacular!", "Que massa!",
    "Show!", "Top demais!", "Kkkk!", "Adorei!", "Divertido!",
    "Genial!", "√ìtimo post!", "Boa essa!", "Criativo!", "Melhor do dia!",
    "Rsrs, curti!", "Interessante!", "Legal!", "Uhuul!", "üòÇüòÇ",
    "Haha, incr√≠vel!", "Super criativo!", "Que conte√∫do!", "Post genial!", "T√¥ rindo muito!",
    "üòÜüòÜ", "üëèüëè", "Haha, show!", "Melhor hashtag!", "Arrasou!",
    "ü§£ü§£", "Mandou bem!", "Que ideia!", "Haha, curti muito!", "Rsrs, gostei!"
]

# Fun√ß√£o para carregar estat√≠sticas de intera√ß√µes
def load_stats():
    global hourly_interactions, daily_interactions
    if os.path.exists(STATS_FILE):
        with open(STATS_FILE, "r") as file:
            stats = json.load(file)
            hourly_interactions = stats.get("hourly_interactions", 0)
            daily_interactions = stats.get("daily_interactions", 0)

# Fun√ß√£o para salvar estat√≠sticas de intera√ß√µes
def save_stats():
    with open(STATS_FILE, "w") as file:
        json.dump({
            "hourly_interactions": hourly_interactions,
            "daily_interactions": daily_interactions
        }, file)

# Fun√ß√£o para fazer login e salvar sess√£o
def login(username, password):
    if os.path.exists(SESSION_FILE):
        st.info("[INFO] Restaurando sess√£o salva...")
        client.load_settings(SESSION_FILE)
    if not client.user_id:
        st.info("[INFO] Sess√£o inv√°lida ou expirada. Reautenticando...")
        client.login(username, password)
        client.dump_settings(SESSION_FILE)
        st.success("[INFO] Login bem-sucedido!")
    else:
        st.success("[INFO] Sess√£o carregada com sucesso!")

# Fun√ß√£o para garantir que o login est√° v√°lido
def ensure_login(username, password):
    if not client.user_id:
        st.warning("[WARNING] Sess√£o inv√°lida. Reautenticando...")
        login(username, password)

# Fun√ß√£o para curtir, seguir e comentar usu√°rios de uma hashtag
def interact_with_hashtags(hashtags, username, password, log_container):
    global hourly_interactions, daily_interactions
    ensure_login(username, password)  # Garante que o login √© v√°lido
    try:
        # Seleciona uma hashtag aleat√≥ria
        hashtag = random.choice(hashtags)
        hashtag_url = f"https://www.instagram.com/explore/tags/{hashtag}/"
        log_container.markdown(
            f"[INFO] Acessando hashtag: <a href='{hashtag_url}' target='_blank'>#{hashtag}</a>",
            unsafe_allow_html=True
        )

        # Obt√©m postagens da hashtag
        posts = client.hashtag_medias_recent(hashtag, amount=20)
        if not posts:
            log_container.write(f"[INFO] Nenhum post encontrado para a hashtag #{hashtag}")
            return

        # Seleciona um post aleat√≥rio
        post = random.choice(posts)
        user_id = post.user.pk
        username = post.user.username
        post_url = f"https://www.instagram.com/p/{post.code}/"
        profile_url = f"https://www.instagram.com/{username}/"

        # Log com links clic√°veis
        log_container.markdown(
            f"[INFO] Selecionado post de <a href='{profile_url}' target='_blank'>@{username}</a> "
            f"(ID: {user_id}) - <a href='{post_url}' target='_blank'>Ver Post</a>",
            unsafe_allow_html=True
        )

        actions = {"liked": False, "followed": False, "commented": False}

        # Decide aleatoriamente se ir√° curtir o post (50% de chance)
        if random.choice([True, False]):
            client.media_like(post.id)
            log_container.markdown(
                f"[SUCCESS] Curtiu o post de <a href='{profile_url}' target='_blank'>@{username}</a>",
                unsafe_allow_html=True
            )
            hourly_interactions += 1
            daily_interactions += 1
            actions["liked"] = True
        else:
            log_container.write(f"[INFO] Decidiu n√£o curtir o post de @{username}.")

        # Decide aleatoriamente se ir√° seguir o usu√°rio (50% de chance)
        if random.choice([True, False]):
            client.user_follow(user_id)
            log_container.markdown(
                f"[SUCCESS] Seguiu o usu√°rio <a href='{profile_url}' target='_blank'>@{username}</a>",
                unsafe_allow_html=True
            )
            hourly_interactions += 1
            daily_interactions += 1
            actions["followed"] = True
        else:
            log_container.write(f"[INFO] Decidiu n√£o seguir o usu√°rio @{username}.")

        # Decide aleatoriamente se ir√° comentar (10% de chance)
        if random.randint(1, 100) <= 10:
            comment = random.choice(comments)
            client.media_comment(post.id, comment)
            log_container.markdown(
                f"[SUCCESS] Comentou no post de <a href='{profile_url}' target='_blank'>@{username}</a>: '{comment}'",
                unsafe_allow_html=True
            )
            hourly_interactions += 1
            daily_interactions += 1
            actions["commented"] = True
        else:
            log_container.write(f"[INFO] Decidiu n√£o comentar no post de @{username}.")

        log_container.write(f"[INFO] A√ß√µes realizadas: {actions}")
        save_stats()  # Salva as estat√≠sticas ap√≥s cada intera√ß√£o

    except Exception as e:
        if "challenge_required" in str(e):
            log_container.error("[ERROR] Challenge required detectado. Pausando bot.")
            st.stop()
        else:
            log_container.error(f"[ERROR] Erro ao interagir com a hashtag: {str(e)}")

# Interface do Streamlit
def main():
    global hourly_interactions, daily_interactions
    load_stats()  # Carrega as estat√≠sticas ao iniciar

    st.title("Bot de Intera√ß√£o no Instagram")

    # Sidebar com informa√ß√µes de login e estat√≠sticas
    username = st.sidebar.text_input("Usu√°rio do Instagram", value="dr.economicomics")
    password = st.sidebar.text_input("Senha do Instagram", type="password", value="PadraoSS2024!")
    st.sidebar.write(f"Intera√ß√µes na √∫ltima hora: {hourly_interactions}")
    st.sidebar.write(f"Intera√ß√µes no dia: {daily_interactions}")
    hashtags = st.sidebar.text_area("Hashtags (separadas por v√≠rgulas)", value="memes,humor,engracado,humorbrasil,piadas,rindoalto,comedia,zoeira,memesbr,memesengracados,humornacional,humornegro,risadas,memezando,memedodia,brasilmemes,brincadeiras,zoeirabr,comediaengracada,memesbrasileiros,humordehoje,memesvirais,engracados,zoeiramemes,humoristas,vidadehumorista,piadabr,piadasengracadas,zoeiradiaria,memeiros,humorinteligente,humoradulto,memesdiarios,risos,zoeiraengracada,comediabrasil,divertido,humorbr,zoeiradiaria,humor360,memeshumor,piadadodia,humorvideos,humormemes,memesviral,humorvideosengracados,memesehumor,humorcompartilhado,humorvirais,humorzoeira,comediadigital,memesbrasil,humorlocal,zoeiraextrema,humornacara,risadassinceras,memebrasileiro").split(",")

    # Cont√™iner para logs
    log_container = st.container()

    # Bot√µes na interface
    if st.sidebar.button("Fazer Login"):
        login(username, password)

    if st.button("Iniciar Intera√ß√µes"):
        while True:
            interact_with_hashtags(hashtags, username, password, log_container)
            delay = random.randint(60, 600)
            log_container.write(f"[INFO] Ciclo completo. Aguardando {delay} segundos antes do pr√≥ximo ciclo...")
            time.sleep(delay)

if __name__ == "__main__":
    main()
